version: '3.8'

services:
  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: accountant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-1
      - app-2
      - app-3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application Instances (Horizontal Scaling)
  app-1:
    build: .
    container_name: accountant-app-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis-cluster:6379
      - KAFKA_BROKERS=kafka-cluster:9092
      - INSTANCE_ID=app-1
    depends_on:
      - redis-cluster
      - kafka-cluster
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app-2:
    build: .
    container_name: accountant-app-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis-cluster:6379
      - KAFKA_BROKERS=kafka-cluster:9092
      - INSTANCE_ID=app-2
    depends_on:
      - redis-cluster
      - kafka-cluster
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app-3:
    build: .
    container_name: accountant-app-3
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis-cluster:6379
      - KAFKA_BROKERS=kafka-cluster:9092
      - INSTANCE_ID=app-3
    depends_on:
      - redis-cluster
      - kafka-cluster
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for High Availability
  redis-cluster:
    image: redis:7-alpine
    container_name: accountant-redis-cluster
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-AccountantAI_Redis_2025!}
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
      --maxclients 10000
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-AccountantAI_Redis_2025!}
    volumes:
      - redis_cluster_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.0'
        reservations:
          memory: 2G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-AccountantAI_Redis_2025!}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: accountant-redis-sentinel
    command: >
      redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-cluster
    restart: unless-stopped

  # Zookeeper Cluster (3 nodes for high availability)
  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: accountant-zookeeper-1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper_1_data:/var/lib/zookeeper/data
      - zookeeper_1_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  zookeeper-2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: accountant-zookeeper-2
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper_2_data:/var/lib/zookeeper/data
      - zookeeper_2_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  zookeeper-3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: accountant-zookeeper-3
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper_3_data:/var/lib/zookeeper/data
      - zookeeper_3_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # Kafka Cluster (3 brokers for high throughput)
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: accountant-kafka-1
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_REPLICA_SOCKET_TIMEOUT_MS: 30000
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 30000
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
    volumes:
      - kafka_1_data:/var/lib/kafka/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: accountant-kafka-2
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_REPLICA_SOCKET_TIMEOUT_MS: 30000
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 30000
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
    volumes:
      - kafka_2_data:/var/lib/kafka/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  kafka-3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: accountant-kafka-3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:9096
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_REPLICA_SOCKET_TIMEOUT_MS: 30000
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 30000
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
    volumes:
      - kafka_3_data:/var/lib/kafka/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Kafka Cluster Service (for load balancing)
  kafka-cluster:
    image: confluentinc/cp-kafka:7.4.0
    container_name: accountant-kafka-cluster
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    command: >
      bash -c "
      echo 'Waiting for Kafka brokers to be ready...' &&
      sleep 30 &&
      echo 'Creating topics...' &&
      kafka-topics --create --if-not-exists --topic user-events --bootstrap-server kafka-1:9092 --partitions 12 --replication-factor 3 &&
      kafka-topics --create --if-not-exists --topic content-events --bootstrap-server kafka-1:9092 --partitions 12 --replication-factor 3 &&
      kafka-topics --create --if-not-exists --topic news-events --bootstrap-server kafka-1:9092 --partitions 8 --replication-factor 3 &&
      kafka-topics --create --if-not-exists --topic analytics-events --bootstrap-server kafka-1:9092 --partitions 8 --replication-factor 3 &&
      echo 'Topics created successfully' &&
      tail -f /dev/null
      "
    environment:
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: accountant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: accountant-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # Rate Limiting Service
  rate-limiter:
    image: redis:7-alpine
    container_name: accountant-rate-limiter
    command: >
      redis-server 
      --port 6380
      --appendonly yes 
      --requirepass ${RATE_LIMITER_PASSWORD:-RateLimiter_2025!}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    environment:
      - RATE_LIMITER_PASSWORD=${RATE_LIMITER_PASSWORD:-RateLimiter_2025!}
    volumes:
      - rate_limiter_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${RATE_LIMITER_PASSWORD:-RateLimiter_2025!}", "-p", "6380", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_cluster_data:
    driver: local
  kafka_1_data:
    driver: local
  kafka_2_data:
    driver: local
  kafka_3_data:
    driver: local
  zookeeper_1_data:
    driver: local
  zookeeper_2_data:
    driver: local
  zookeeper_3_data:
    driver: local
  zookeeper_1_logs:
    driver: local
  zookeeper_2_logs:
    driver: local
  zookeeper_3_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  rate_limiter_data:
    driver: local

networks:
  default:
    name: accountant-production-network
    driver: bridge
